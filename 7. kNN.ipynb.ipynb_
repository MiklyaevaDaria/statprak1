{"cells":[{"cell_type":"markdown","source":["<a href=\"https://colab.research.google.com/drive/1tElT3FhddabqCyJKFH27rhnyXJTqrzke?usp=sharing\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"],"metadata":{"id":"OvnP--9WOaMh"}},{"cell_type":"markdown","metadata":{"id":"p0PB7oM_OWHh"},"source":["# K Nearest Neighbors (KNN)"]},{"cell_type":"markdown","metadata":{"id":"hd0R4mHNOWHi"},"source":["## Introduction"]},{"cell_type":"markdown","metadata":{"id":"M0oM9tTFOWHi"},"source":["The k Nearest Neighbors method (kNN) is a very popular classification method, also sometimes used in regression tasks. It's one of the most understandable approaches to classification. Intuitively, the essence of the method is: look at the neighbors; the predominant ones indicate what you are. Formally, the basis of the method is the compactness hypothesis: if the distance metric between examples is introduced successfully, then similar examples are much more likely to be in the same class than in different ones."]},{"cell_type":"markdown","metadata":{"id":"56PED-ZnOWHi"},"source":["<img src='https://hsto.org/web/68d/a45/6f0/68da456f00f8434e87628dbe7e3f54a7.png' width=600>"]},{"cell_type":"markdown","metadata":{"id":"2meyFYqeOWHi"},"source":[" For the classification of each object in the test dataset, it is necessary to sequentially perform the following operations:\n","   * Calculate the distance to each of the objects in the training dataset.\n","   * Select objects from the training dataset to which the distance is minimal.\n","   * The class of the classified object is the class most frequently occurring among the k nearest neighbors."]},{"cell_type":"markdown","metadata":{"id":"iJtHnaBsOWHj"},"source":["We will work with a subset of the [Covertype dataset from the UCI repository](http://archive.ics.uci.edu/ml/datasets/Covertype). There are 7 different classes available. Each object is described by 54 features, 40 of which are binary. The data description is available at the link."]},{"cell_type":"markdown","metadata":{"id":"fi2gqrL7OWHj"},"source":["## Preprocessing"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"xQ1M9pzAOWHj","executionInfo":{"status":"ok","timestamp":1712496499376,"user_tz":-180,"elapsed":536,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np"]},{"cell_type":"markdown","metadata":{"id":"6RTfVLH8OWHj"},"source":["Press [here](https://drive.google.com/file/d/1Z39LNnF4lOj4iT48YDYFZNPDBglMd0TZ/view?usp=sharing) to download the dataset."]},{"cell_type":"code","execution_count":4,"metadata":{"id":"nXEtZZEIOWHk","colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"status":"ok","timestamp":1712497263544,"user_tz":-180,"elapsed":666,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}},"outputId":"ccb4a366-f755-4feb-9bf8-d7257e508429"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      0    1   2    3   4     5    6    7    8     9  ...  45  46  47  48  49  \\\n","0  2683  333  35   30  26  2743  121  173  179  6572  ...   0   0   0   0   0   \n","1  2915   90   8  216  11  4433  232  228  129  4019  ...   0   0   0   0   0   \n","2  2941  162   7  698  76  2783  227  242  148  1784  ...   0   0   0   0   0   \n","3  3096   60  17  170   3  3303  231  202   99  5370  ...   0   0   0   0   0   \n","4  2999   66   8  488  37  1532  228  225  131  2290  ...   0   0   0   0   0   \n","\n","   50  51  52  53  54  \n","0   0   0   0   0   2  \n","1   0   0   0   0   1  \n","2   0   0   0   0   2  \n","3   0   0   0   0   1  \n","4   0   0   0   0   2  \n","\n","[5 rows x 55 columns]"],"text/html":["\n","  <div id=\"df-d6f25ddd-2371-42ef-9c2f-bbb3860bfa95\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>...</th>\n","      <th>45</th>\n","      <th>46</th>\n","      <th>47</th>\n","      <th>48</th>\n","      <th>49</th>\n","      <th>50</th>\n","      <th>51</th>\n","      <th>52</th>\n","      <th>53</th>\n","      <th>54</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2683</td>\n","      <td>333</td>\n","      <td>35</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>2743</td>\n","      <td>121</td>\n","      <td>173</td>\n","      <td>179</td>\n","      <td>6572</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2915</td>\n","      <td>90</td>\n","      <td>8</td>\n","      <td>216</td>\n","      <td>11</td>\n","      <td>4433</td>\n","      <td>232</td>\n","      <td>228</td>\n","      <td>129</td>\n","      <td>4019</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2941</td>\n","      <td>162</td>\n","      <td>7</td>\n","      <td>698</td>\n","      <td>76</td>\n","      <td>2783</td>\n","      <td>227</td>\n","      <td>242</td>\n","      <td>148</td>\n","      <td>1784</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3096</td>\n","      <td>60</td>\n","      <td>17</td>\n","      <td>170</td>\n","      <td>3</td>\n","      <td>3303</td>\n","      <td>231</td>\n","      <td>202</td>\n","      <td>99</td>\n","      <td>5370</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2999</td>\n","      <td>66</td>\n","      <td>8</td>\n","      <td>488</td>\n","      <td>37</td>\n","      <td>1532</td>\n","      <td>228</td>\n","      <td>225</td>\n","      <td>131</td>\n","      <td>2290</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 55 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d6f25ddd-2371-42ef-9c2f-bbb3860bfa95')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d6f25ddd-2371-42ef-9c2f-bbb3860bfa95 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d6f25ddd-2371-42ef-9c2f-bbb3860bfa95');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6942cefb-5937-42f0-995f-b278e50600e9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6942cefb-5937-42f0-995f-b278e50600e9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6942cefb-5937-42f0-995f-b278e50600e9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"all_data"}},"metadata":{},"execution_count":4}],"source":["all_data = pd.read_csv('/content/drive/MyDrive/forest_dataset.csv')\n","all_data.head()"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PWA_pRRKyJnK","executionInfo":{"status":"ok","timestamp":1712497170922,"user_tz":-180,"elapsed":25382,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}},"outputId":"617e80bf-5754-46ed-a4a1-517b0c1f5c4c"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":5,"metadata":{"id":"CTR33GswOWHk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712497270803,"user_tz":-180,"elapsed":254,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}},"outputId":"2653ea34-d227-4ad3-e5b5-3f98e4929c9c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10000, 55)"]},"metadata":{},"execution_count":5}],"source":["all_data.shape"]},{"cell_type":"markdown","metadata":{"id":"3qodMnQdOWHk"},"source":["Extract the class labels into a variable `labels`, and the feature descriptions into a variable `feature_matrix`. Since the data is numerical and does not have missing values, we will convert it to `numpy` format using the `.values` method."]},{"cell_type":"code","execution_count":6,"metadata":{"id":"diR0e1TmOWHk","executionInfo":{"status":"ok","timestamp":1712497274533,"user_tz":-180,"elapsed":299,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}}},"outputs":[],"source":["labels = all_data[all_data.columns[-1]].values\n","feature_matrix = all_data[all_data.columns[:-1]].values"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"1-3rcMquOWHk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712497277571,"user_tz":-180,"elapsed":269,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}},"outputId":"149663ce-23ca-46a9-ab67-84482cd715c8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[2683,  333,   35, ...,    0,    0,    0],\n","       [2915,   90,    8, ...,    0,    0,    0],\n","       [2941,  162,    7, ...,    0,    0,    0],\n","       ...,\n","       [2693,   21,   11, ...,    0,    0,    0],\n","       [2536,   42,   11, ...,    0,    0,    0],\n","       [3109,  261,   10, ...,    0,    0,    0]])"]},"metadata":{},"execution_count":7}],"source":["feature_matrix"]},{"cell_type":"markdown","metadata":{"id":"GEgU9TZBOWHk"},"source":["## Train-test split"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"3IaL5H9kOWHk","executionInfo":{"status":"ok","timestamp":1712497281990,"user_tz":-180,"elapsed":1411,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}}},"outputs":[],"source":["from sklearn.model_selection import train_test_split"]},{"cell_type":"markdown","metadata":{"id":"4DEAU8TqOWHk"},"source":["We will now work with all 7 types of cover (the data is already in the variables `feature_matrix` and `labels` if you haven't redefined them). Divide the sample into training and test sets using the `train_test_split` method.\n"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"xQWx8vePOWHl","executionInfo":{"status":"ok","timestamp":1712497286088,"user_tz":-180,"elapsed":237,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}}},"outputs":[],"source":["train_feature_matrix, test_feature_matrix, train_labels, test_labels = train_test_split(\n","    feature_matrix, labels, test_size=0.2, random_state=42)"]},{"cell_type":"markdown","metadata":{"id":"Lpg4XD1IOWHl"},"source":["The main objects in `sklearn` are the so-called `estimators`. They are divided into **classifiers** and **regressors**.\n","\n","As examples of models, you can consider the classifiers\n","[k Nearest Neighbors](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html) and\n","[logistic regression](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html)."]},{"cell_type":"markdown","metadata":{"id":"TDidTqXqOWHl"},"source":["All models in `sklearn` must have at least 2 methods  -- `fit` and `predict`.\n","The `fit(X, y)` method is responsible for training the model and takes as input a training sample in the form of a *feature matrix* $X$ and a *response vector* $y$.\n","\n","After `fit`, you can now call the `predict(X)` method on the trained model, which will return predictions of this model on all objects from the matrix $X$ in the form of a vector.\n","\n","You can call `fit` on the same model several times; each time it will be trained anew on the given dataset.\n","\n","Also, models have *hyperparameters*, which are usually set when creating the model.\n","\n","Let's see all this on the example of logistic regression.\n"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"N86gc5RCOWHl","executionInfo":{"status":"ok","timestamp":1712497290283,"user_tz":-180,"elapsed":336,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}}},"outputs":[],"source":["from sklearn.linear_model import LogisticRegression"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"QTtDgQmNOWHl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712497293953,"user_tz":-180,"elapsed":2215,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}},"outputId":"eb130e66-e00f-4be3-dcd5-a32270a061e1"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]}],"source":["clf = LogisticRegression(C=1)\n","clf.fit(train_feature_matrix, train_labels)\n","y_pred = clf.predict(test_feature_matrix)"]},{"cell_type":"markdown","metadata":{"id":"rmS3Am9qOWHl"},"source":["Now, we would like to measure the quality of our model. For this, we can use the `score(X, y)` method, which will calculate some error function on the sample $X, y$, but exactly which one depends on the model. Alternatively, one of the functions from the `metrics` module can be used, for example, [accuracy_score](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html), which, as the name suggests, will calculate the accuracy of predictions for us.\n"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"Urle65PsOWHl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712497295202,"user_tz":-180,"elapsed":238,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}},"outputId":"c9cb3e5e-0df7-4432-b83a-d3a7d8cd525f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6075"]},"metadata":{},"execution_count":12}],"source":["from sklearn.metrics import accuracy_score\n","\n","accuracy_score(test_labels, y_pred)"]},{"cell_type":"markdown","metadata":{"id":"48YGohwWOWHl"},"source":["Finally, the last thing we would like to mention is grid search for hyperparameter tuning. Since models have many hyperparameters that can be changed, and the quality of the model significantly depends on these hyperparameters, it would be desirable to find the best parameters in this sense. The simplest way to do this is to just iterate over all possible variants within reasonable limits.\n","\n","This can be done using the [GridSearchCV](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html) class, which conducts a search (search) across a grid (grid) and calculates the quality of the model using cross-validation (CV).\n","\n","For example, in logistic regression, you can change the `C` and `penalty` parameters. Let's do that. Keep in mind that the search may take a long time. Refer to the documentation for the meaning of the parameters.\n"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"VC8CsoCiOWHl","executionInfo":{"status":"ok","timestamp":1712497297837,"user_tz":-180,"elapsed":255,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}}},"outputs":[],"source":["from sklearn.model_selection import GridSearchCV"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"beDd8pnjOWHl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712497436211,"user_tz":-180,"elapsed":136387,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}},"outputId":"813218c0-f37a-4800-ae93-e3412fd2324f"},"outputs":[{"output_type":"stream","name":"stdout","text":["{'C': 1, 'penalty': 'l2'}\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]}],"source":["clf = LogisticRegression(solver='saga')\n","\n","# init GridSearchCV with parameters\n","param_grid = {\n","    'C': np.arange(1, 5),\n","    'penalty': ['l1', 'l2'],\n","}\n","\n","search = GridSearchCV(clf, param_grid, n_jobs=-1, cv=5, refit=True, scoring='accuracy')\n","\n","search.fit(feature_matrix, labels)\n","\n","print(search.best_params_)"]},{"cell_type":"markdown","metadata":{"id":"ZfcIUNj5OWHm"},"source":["In this case, the search iterates over all possible pairs of values for `C` and `penalty` from the specified sets.\n"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"q7HHAlQkOWHm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712497617221,"user_tz":-180,"elapsed":260,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}},"outputId":"36198cad-0c97-49c0-dd8f-de7eb4ec9a03"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6417"]},"metadata":{},"execution_count":15}],"source":["accuracy_score(labels, search.best_estimator_.predict(feature_matrix))"]},{"cell_type":"markdown","metadata":{"id":"3Q5JdBTFOWHm"},"source":["Note that we pass the entire dataset to GridSearchCV, not just its training part. This can be done because the search still uses cross-validation. However, sometimes a *validation* part is still separated from the dataset, as the hyperparameters might overfit to the sample during the search process."]},{"cell_type":"markdown","metadata":{"id":"ZPhoojCGOWHm"},"source":["In the tasks, you will need to repeat this for the k Nearest Neighbors method."]},{"cell_type":"markdown","metadata":{"id":"yO85IBvNOWHm"},"source":["# Homework"]},{"cell_type":"markdown","metadata":{"id":"dlCL0OvdOWHm"},"source":["The quality of classification/regression by the k Nearest Neighbors method depends on several parameters:\n","* the number of neighbors `n_neighbors`\n","* the distance metric between objects `metric`\n","* the weights of neighbors (the neighbors of the test example can enter with different weights, for example, the further the example, the less its \"voice\" is taken into account) `weights`\n"]},{"cell_type":"markdown","metadata":{"id":"cI0DvVkQOWHm"},"source":["Train the `KNeighborsClassifier` on the dataset."]},{"cell_type":"code","execution_count":63,"metadata":{"id":"RO-db3oyOWHm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712510665513,"user_tz":-180,"elapsed":1757,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}},"outputId":"a8d8d12f-8e64-41c5-c090-146e1495baf2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.7365\n"]}],"source":["from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import accuracy_score\n","\n","clf = KNeighborsClassifier(n_neighbors=5, weights='uniform', metric='euclidean')\n","\n","clf.fit(train_feature_matrix, train_labels)\n","y_pred = clf.predict(test_feature_matrix)\n","print(\"Accuracy:\", accuracy_score(test_labels, y_pred))\n"]},{"cell_type":"markdown","metadata":{"id":"Uq8alAscOWHm"},"source":["Let's select the parameters of our model:\n","\n","* Iterate over the grid from `1` to `10` for the number of neighbors parameter\n","* Also, try using different metrics: `['manhattan', 'euclidean']`\n","* Try using different weight calculation strategies: `[‘uniform’, ‘distance’]`"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ci7bPeJUOWHn"},"outputs":[],"source":["from sklearn.model_selection import GridSearchCV\n","\n","params = {\n","    'n_neighbors': list(range(1, 11)),\n","    'metric': ['manhattan', 'euclidean'],\n","    'weights': ['uniform', 'distance'],\n","}\n","clf_grid = GridSearchCV(clf, params, cv=5, scoring='accuracy', n_jobs=-1)\n","clf_grid.fit(feature_matrix, labels)\n"]},{"cell_type":"markdown","metadata":{"id":"VXs8qtH6OWHn"},"source":["Let's output the best parameters"]},{"cell_type":"code","execution_count":65,"metadata":{"id":"ufdqMCh6OWHn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712510903949,"user_tz":-180,"elapsed":276,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}},"outputId":"8667e26f-d1ef-49bb-f638-17861dc17721"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'metric': 'manhattan', 'n_neighbors': 4, 'weights': 'distance'}"]},"metadata":{},"execution_count":65}],"source":["clf_grid.best_params_"]},{"cell_type":"markdown","metadata":{"id":"aJqWo_jpOWHn"},"source":["Using the optimal number of neighbors found, calculate the probabilities of belonging to classes for the test sample (`.predict_proba`)."]},{"cell_type":"code","execution_count":66,"metadata":{"id":"u7iy695sOWHn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712510907969,"user_tz":-180,"elapsed":1047,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}},"outputId":"e8c7b9f0-a570-4e3b-dfb1-6145e8719197"},"outputs":[{"output_type":"stream","name":"stdout","text":["The probabilities of belonging to classes for the test sample:\n","[[0.         1.         0.         ... 0.         0.         0.        ]\n"," [0.73117861 0.26882139 0.         ... 0.         0.         0.        ]\n"," [0.27814042 0.72185958 0.         ... 0.         0.         0.        ]\n"," ...\n"," [1.         0.         0.         ... 0.         0.         0.        ]\n"," [0.         1.         0.         ... 0.         0.         0.        ]\n"," [0.54264548 0.         0.         ... 0.         0.         0.45735452]]\n"]}],"source":["optimal_clf = KNeighborsClassifier(n_neighbors=clf_grid.best_params_['n_neighbors'],\n","                                   weights=clf_grid.best_params_['weights'],\n","                                   metric=clf_grid.best_params_['metric'])\n","optimal_clf.fit(train_feature_matrix, train_labels)\n","pred_prob = optimal_clf.predict_proba(test_feature_matrix)\n","\n","print(\"The probabilities of belonging to classes for the test sample:\")\n","print(pred_prob)"]},{"cell_type":"code","execution_count":67,"metadata":{"id":"c8o561FcOWHn","colab":{"base_uri":"https://localhost:8080/","height":676},"executionInfo":{"status":"ok","timestamp":1712510910749,"user_tz":-180,"elapsed":859,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}},"outputId":"0cd160ef-0698-4be6-8715-42e54ac8c5df"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import matplotlib.pyplot as plt\n","%matplotlib inline\n","import numpy as np\n","\n","unique, freq = np.unique(test_labels, return_counts=True)\n","freq = list(map(lambda x: x / len(test_labels),freq))\n","\n","pred_freq = pred_prob.mean(axis=0)\n","plt.figure(figsize=(10, 8))\n","plt.bar(range(1, 8), pred_freq, width=0.4, align=\"edge\", label='prediction')\n","plt.bar(range(1, 8), freq, width=-0.4, align=\"edge\", label='real')\n","plt.ylim(0, 0.54)\n","plt.legend()\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"dhz7zUifOWHo"},"source":["## Conclusion"]},{"cell_type":"markdown","metadata":{"id":"x3CYnBpVOWHo"},"source":["What is the quality of the model on the test sample? Compare it with the quality of logistic regression. Which model is better? Why? What are the pros and cons of the k Nearest Neighbors method? Plot the ROC curve for the k Nearest Neighbors method. Calculate the area under the ROC curve (AUC-ROC)."]},{"cell_type":"markdown","source":["Точность в KNN модели = 0,73, а точность в логистической модели = 0,6. Из этого показателя следует,что KNN-модель работает лучше (тк более высокая точность указывает на лучшее качество в задачах классификации).\n","\n","+ ПЛЮСЫ KNN-модели: непараметрический метод (нет предположений о распределении данных),  обрабатывает многоклассовую классификацию\n","- МИНУСЫ KNN-модели: чувствителен к выбору количества соседей (n_neighbors), при большом числе samples вычислительно затратен\n"],"metadata":{"id":"5ZrNQKyKL1xQ"}},{"cell_type":"markdown","source":["По следующему графику можно сделать вывод, что KNN- модель является хорошей моделью классификации, тк ROC-кривая находится выше диагонали, т.е. обеспечивает лучшее качество, чем случайное угадывание"],"metadata":{"id":"pzhGUZ2Pko6D"}},{"cell_type":"code","source":["from sklearn.metrics import roc_curve, auc\n","from sklearn.preprocessing import label_binarize\n","\n","test_labels_bin = label_binarize(test_labels, classes=[1, 2, 3, 4, 5, 6, 7])  # преобразование меток классов в формат бинарных меток\n","false_prate = dict()\n","true_prate = dict()\n","roc_auc = dict()\n","for i in range(7):\n","    false_prate[i], true_prate[i], _ = roc_curve(test_labels_bin[:, i], pred_prob[:, i])#вычисление ROC-кривой для каждого класса\n","    roc_auc[i] = auc(false_prate[i], true_prate[i]) #вычисление площади под ROC-кривой\n","\n","plt.figure()\n","colors = ['coral', 'navy', 'pink', 'violet', 'brown', 'gold', 'purple']\n","for i, color in zip(range(7), colors):\n","    plt.plot(false_prate[i], true_prate[i], color=color)\n","plt.plot([0, 1], [0, 1], color='red', linestyle='--') # ROC-кривая для случайного классификатора\n","plt.xlabel('False positive rate')\n","plt.ylabel('True positive rate')\n","plt.title('ROC curve for the k Nearest Neighbors method')\n","plt.show()\n","\n","mean_auc_roc = np.mean(list(roc_auc.values()))\n","print(\"The area under the ROC curve\", mean_auc_roc)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"id":"OC1vthNRL2hH","executionInfo":{"status":"ok","timestamp":1712510916474,"user_tz":-180,"elapsed":795,"user":{"displayName":"Daria Mikl","userId":"14765554842636828210"}},"outputId":"da544c58-965c-4439-c3c1-608af876266f"},"execution_count":68,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["The area under the ROC curve 0.9057501676949595\n"]}]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.6"},"colab":{"provenance":[{"file_id":"1tElT3FhddabqCyJKFH27rhnyXJTqrzke","timestamp":1712132841901}]}},"nbformat":4,"nbformat_minor":0}